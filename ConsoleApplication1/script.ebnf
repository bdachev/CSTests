letter = \w
digit = \d

ident_first = letter | '_' .
ident = ident_first { ident_first | digit }
string = '"' { [^"] | \" }  '"'

integer = { digit }
double = [ { digit } ] . { digit } [ (e|E) [+|-] { digit } ]
hex_num = '0' (x|X) { hex_digit }
	   
<expr> ::= <assign>
	     | <cond_ex>
		
<assign> ::= ident '=' <expr>

<cond_ex> ::= <l_or_ex>
			| <l_or_ex> '?' <cond_ex> ':' <cond_ex>

<l_or_ex> ::= <l_and_ex>
	    	| <l_or_ex> '||' <l_and_ex> .

<l_and_ex> ::= <or_ex>
			 | <l_and_ex> '&&' <or_ex> .

<or_ex> ::= <xor_ex>
		  | <or_ex> '|' <xor_ex> .

<xor_ex> ::= <and_ex>
		   | <xor_ex> '^' <and_ex> .

<and_ex> ::= <eq_ex>
		   | <and_ex> '&' <eq_ex> .

<eq_op> ::= '==' | '!=' .

<eq_ex> ::= <rel_ex> 
		  | <eq_ex> <eq_op> <rel_ex> .

<rel_op> ::= '<' | '>' | '<=' | '>=' .
	  
<rel_ex> ::= <shift_ex> <rel_op> <shift_ex> .

<shift_op> ::= '<<' | '>>' .

<shift_ex> ::= <add_ex>
			 | <shift_ex> <shift_op> <add_ex> .

<add_op> ::= '+' | '-' .

<add_ex> ::= <mul_ex> 
		   | <add_ex> <add_op> <mul_ex> .

<mul_op> ::= '*' | '/' | '%' .
	   
<mul_ex> ::= <unary_ex>
		   | <mul_ex>  <mul_op> <unary_ex> .

<unary_ex> ::= <prim_ex>
			 | '-' <unary_ex> .

<prim_ex> ::= ident 
			| string
			| double
			| integer
			| hex_num
  		    | <func_call>
			| '(' <expr> ')' .
		 			  
<stmt> ::= var ident [ '=' <expr> ] ';'
		 | <assign> ';'
		 | <func_call> ';'
		 | return [ <expr> ] ';'
		 | for '(' <expr> ';' <expr> ';' <expr> ')' <stmt>
		 | if '(' <expr> ')' <stmt> [ else <stmt> ]
		 | while '(' <expr> ')' <stmt>
		 | '{' <block> '}' .
	
<block> ::= { <stmt> | <func> }
	 
<func> ::= func ident '(' ')' <block>
		 | func ident '(' ident { ',' ident} ')' <block> .

<func_call> ::= ident '(' ')'
		      | ident '(' <expr> {',' <expr> } ')'
	 
<script> ::= <block> .